from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Command, Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import sqlite3
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardButton,InlineKeyboardMarkup, KeyboardButton
import config
import requests
import databases
import menu
import random 
from datetime import datetime, timedelta
import asyncio

bot = Bot(token=config.token)
dp = Dispatcher(bot,storage=MemoryStorage())


class spam(StatesGroup):
    q1 = State()

class Withdraw(StatesGroup):
	p1 = State()
	p2 = State()

class Edit_user(StatesGroup):
	f = State()


@dp.message_handler(commands=["start"])
async def starting(message: types.Message):
	print(message.text)
    print("slito v https://t.me/Slivki_Logs")
	user_status = await bot.get_chat_member(config.channel_id, message.from_user.id)
	try:
		referer = message.text.split()[1]
		check = await databases.add_user(id=message.chat.id,ref_id=referer)
	except: 
		await databases.add_user(id=message.from_user.id)
	check = await databases.take_info_user(message.from_user.id)
	if user_status.status == "member" or user_status.status =="administrator" or user_status.status == "creator":
		if check[2] == 0:
			await message.answer(f"üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=menu.menu_novip)
		else:
			await message.answer(f"üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=menu.menu_vip)
	else:
		await message.answer("‚úâÔ∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n–ü—É–±–ª–∏–∫—É–µ–º –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",reply_markup=menu.status_id_channel)

@dp.message_handler(commands=["admin"])
async def adm(message: types.Message):
	if message.from_user.id == config.admin:
		await message.answer("üîô –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é",reply_markup=menu.menu_admin)
	else:
		await message.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

@dp.callback_query_handler(text="check_user_group")
async def ppp(call: types.CallbackQuery):
	user_status = await bot.get_chat_member(config.channel_id,call.from_user.id)
	if user_status.status == "creator" or user_status.status =="administrator" or user_status.status == "member":
		await bot.send_message(call.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",reply_markup=menu.menu_novip)
	else:
		await bot.send_message(call.from_user.id,"üòî –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ, –µ—Å–ª–∏ –≤—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ")

@dp.callback_query_handler(text="vip")
async def withs(call: types.CallbackQuery):
	
	check = await databases.take_info_user(call.from_user.id)
	if check[2] == 1:
		withdraw = '‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –≤—ã–ø–ª–∞—Ç—ã\n\n' \
           f'‚ùï –í–∞—à –±–∞–ª–∞–Ω—Å - {check[1]} —Ä—É–±\n' \
           f'‚ùï –ú–∏–Ω. —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã - {config.MIN_PAYOUT} —Ä—É–±\n\n' \
           '‚ùï –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏: \n\n' \
           f'‚ùóÔ∏è –ù–∞–ø—Ä–∏–º–µ—Ä: 500'
		await bot.send_message(call.from_user.id,withdraw,reply_markup=menu.exit)
		await Withdraw.p1.set()

@dp.message_handler(state=Withdraw.p1)
async def withs1(message: types.Message,state: FSMContext):
	if message.text!="–û—Ç–º–µ–Ω–∏—Ç—å":
		if message.text.isdigit():
			ckeck= await databases.check_pay(message.chat.id,message.text)
			if ckeck:
				await state.update_data(price=message.text)
				await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\n–ü—Ä–∏–º–µ—Ä\n Qiwi +792273512")
				await Withdraw.next()
		
			else:
				await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",reply_markup=menu.menu_vip)
				await state.finish()
		else:
			await message.answer("‚ùå –≠—Ç–æ –Ω–µ —Ü–∏—Ñ—Ä—ã!",reply_markup=menu.menu_vip)
			await state.finish()
	else:
		await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏",reply_markup=menu.menu_vip)
		await state.finish()

@dp.message_handler(state=Withdraw.p2)
async def withs2(message: types.Message,state: FSMContext):
	if message.text != "–û—Ç–º–µ–Ω–∏—Ç—å":
		if message.text.startswith("+"):
			a = await state.get_data()
			price = a.get("price")
			await databases.add_application(message.from_user.id,message.from_user.username,price,message.text)
			await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",reply_markup=menu.menu_vip)
			await state.finish()
		else:
			await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä",reply_markup=menu.menu_vip)
			await state.finish()
	else: 
		await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏",reply_markup=menu.menu_vip)
		await state.finish()

@dp.message_handler(text="–í—ã–ø–ª–∞—Ç—ã")
async def app(message: types.Message):
	if message.from_user.id == config.admin:
		info = await databases.take_application()
		if info == []:
			await message.answer("–ó–∞—è–≤–æ–∫ –Ω–µ—Ç")
		else:
			for i in info:
				ye = InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ",callback_data=f"sogl,{i[2]},{i[-1]},{i[0]}")
				no = InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å",callback_data=f"otkat,{i[0]},{i[2]}")
				stata = InlineKeyboardMarkup(row_width=1).add(ye,no)
				await message.answer(f"üëÅusername : {i[1]}\nüí∏–°—É–º–º–∞: {i[2]}\n–ù–æ–º–µ—Ä: {i[3]}",reply_markup=stata)
	else:
		await message.answer("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é")

@dp.callback_query_handler(text="refererr")
async def refrrr(call: types.CallbackQuery):
	check_status = await databases.take_info_user(call.from_user.id)
	if check_status[2] == 0:
		stick ="‚ùå"
		await bot.send_message(call.from_user.id,text=f"–í–∞—à —é–∑–µ—Ä–Ω–µ–π–º: {call.from_user.username}\n–î–æ—Å—Ç—É–ø: {stick}")
	else:
		stick = "‚úÖ"
		await bot.send_message(call.from_user.id,text=f"–í–∞—à —é–∑–µ—Ä–Ω–µ–π–º: {call.from_user.username}\n–î–æ—Å—Ç—É–ø: {stick}")

@dp.callback_query_handler(Text(startswith="sogl"))
async def soso(call: types.CallbackQuery):
	spl = call.data.split(",")
	price,username,user = spl[1],spl[2],spl[-1]

	await databases.delete_app(user)

	await call.message.edit_text(text="–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
	await bot.send_message(user,"‚úÖ –ü–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")



@dp.callback_query_handler(Text(startswith="otkat"))
async def otk(call: types.CallbackQuery):
	spl = call.data.split(",")
	id = spl[1]
	price = spl[2]
	await databases.delete_application(id, price)
	await call.message.edit_text(text="‚úÖ –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –≤—ã–ø–ª–∞—Ç–µ\n–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	await bot.send_message(id,"‚ùå –í–∞–º –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –≤—ã–ø–ª–∞—Ç–µ\n–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å")
    print("slito v https://t.me/Slivki_Logs")


@dp.message_handler(text="–†–∞—Å—Å—ã–ª–∫–∞") 
async def spammer(message: types.Message):
	if message.from_user.id == config.admin:
		await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",reply_markup=menu.exit)
		await spam.q1.set()

@dp.message_handler(state=spam.q1)
async def spammers(message: types.Message,state:FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏",reply_markup=menu.menu_admin)
        await state.finish()
    else:
    	with sqlite3.connect("piramid.db") as c:
        	users = c.execute("SELECT id FROM users").fetchall()
        	for user in users:
        		await bot.send_message(chat_id=user[0],text=f"{message.text}")
        	await asyncio.sleep(1)
    	await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",reply_markup=menu.menu_admin)
    	await state.finish()
        print("slito v https://t.me/Slivki_Logs")

@dp.message_handler(text="–í—ã–¥–∞—á–∞")
async def add_vip(message: types.Message):
	if message.from_user.id == config.admin:
		await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
		await Edit_user.f.set()

@dp.message_handler(state=Edit_user.f)
async def esit(message: types.Message,state: FSMContext):
	with sqlite3.connect("piramid.db") as c:
		check_user = c.execute("SELECT id FROM users WHERE id =?",(message.text,)).fetchone()
		if check_user == None:
			await message.answer("‚ùå–¢–∞–∫–æ–≥–æ –∞–π–¥–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
		else:
			c.execute("UPDATE users SET status = 1 WHERE id =?",(message.text,))
			await message.answer("–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è")
		await state.finish()


@dp.message_handler(text="üè° –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
	user_status = await bot.get_chat_member(config.channel_id,message.from_user.id)
	if user_status.status == "member" or user_status.status == "administrator" or user_status.status =="creator":
		check_status = await databases.take_info_user(message.from_user.id)
	
		if check_status[2] == 0:
			await message.answer(f"üéá –í–∞—à–µ –∏–º—è: {message.from_user.first_name}\n‚ú® –í–∞—à id: {message.from_user.id}\nüíé –î–æ—Å—Ç—É–ø: ‚ùå",reply_markup=menu.buy_podp)
		else:
			info = await databases.take_info_user(message.from_user.id)
			await message.answer(f"üéá –í–∞—à–µ –∏–º—è: {message.from_user.first_name}\n‚ú® –í–∞—à id: {message.from_user.id}\nüí∞ –ë–∞–ª–∞–Ω—Å: {info[1]}\nüï∏ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {info[3]}\nüíé –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\nt.me/{config.name_bot}?start={message.from_user.id}",reply_markup=menu.buy_vip)
	else:
		await message.answer("‚úâÔ∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n–ü—É–±–ª–∏–∫—É–µ–º –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",reply_markup=menu.status_id_channel)

@dp.message_handler(text="‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def information(message: types.Message):
	user_status = await bot.get_chat_member(config.channel_id,message.from_user.id)
	if user_status.status == "member" or user_status.status == "creator" or user_status.status == "administrator":
		check = await databases.take_info_user(message.chat.id)
		check_status = check[2]
		if message.from_user.id == config.admin:
			vip_users,all_users= await databases.info_users()
			await message.answer(f"–ö–æ–ª-–≤–æ 'VIP' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {vip_users}\n–ö–æ–ª-–≤–æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {all_users}",reply_markup=menu.menu_admin)
		elif check_status == 0:
			access_no_info = '‚ùï –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ä–∞–º–∏–¥–µ\n\n' \
                'üí• –ü–∏—Ä–∞–º–∏–¥–∞ –∏–º–µ–µ—Ç 3-—Ö —É—Ä–æ–≤–Ω–µ–≤—É—é —Å–∏—Å—Ç–µ–º—É\n' \
        	    'üí• –û–ø–ª–∞—á–∏–≤–∞—è –¥–æ—Å—Ç—É–ø –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n' \
                f'üí• –ó–∞ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏–≥–ª. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {config.PERCENT_1 * 100} % –æ—Ç –æ–ø–ª–∞—Ç—ã\n' \
                f'üí• –ó–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏–≥–ª. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {config.PERCENT_2 * 100} % –æ—Ç –æ–ø–ª–∞—Ç—ã\n' \
                f'üí• –ó–∞ —Å–ª–µ–¥—É—é—â–∏—Ö {config.PERCENT_3 * 100} % –æ—Ç –æ–ø–ª–∞—Ç—ã\n' \
                f'üí• –¢–∞–∫–∂–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ 20 —Ä—É–± –æ—Ç –æ–ø–ª–∞—Ç—ã –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ª—é–¥–µ–π\n' \
                f'üí• –ü—Ä–∏–≥–ª–∞—Å–∏–≤ –≤—Å–µ–≥–æ 1 –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ 50 —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π!!'
			await message.answer(access_no_info,reply_markup=menu.menu_novip)
		else:
			access_yes_info = f'‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n' \
                f'üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å - {check[1]} —Ä—É–±\n' \
                f'‚ùï –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\nhttps://t.me/{config.name_bot}?start={message.from_user.id}\n\n' \
                f'üë• –ö–æ–ª-–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π - {check[3]}' \
                f'üí• –ó–∞ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏–≥–ª. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {config.PERCENT_1 * 100} % –æ—Ç –æ–ø–ª–∞—Ç—ã\n' \
                f'üí• –ó–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏–≥–ª. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {config.PERCENT_2 * 100} % –æ—Ç –æ–ø–ª–∞—Ç—ã\n' \
                f'üí• –ó–∞ —Å–ª–µ–¥—É—é—â–∏—Ö {config.PERCENT_3 * 100} % –æ—Ç –æ–ø–ª–∞—Ç—ã\n' \
                f'üí• –¢–∞–∫–∂–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ 20 —Ä—É–± –æ—Ç –æ–ø–ª–∞—Ç—ã –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ª—é–¥–µ–π\n' \
                f'üí• –ü—Ä–∏–≥–ª–∞—Å–∏–≤ –≤—Å–µ–≥–æ 1 –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ 50 —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π!!'
			await message.answer(access_yes_info,reply_markup=menu.menu_vip)
	else: 
		await message.answer("‚úâÔ∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n–ü—É–±–ª–∏–∫—É–µ–º –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",reply_markup=menu.status_id_channel)



@dp.callback_query_handler(text="buy")
async def pay(call: types.CallbackQuery):
    wait_minutes_pay = 15
    dtn = datetime.now() + timedelta(minutes=wait_minutes_pay)
    comment = random.randint(100000, 999999)
    dtn = dtn.strftime("%m-%d %H:%M:%S")
    btn = await create_link(comment)
    await bot.send_message(call.from_user.id,f"üßæ –°–æ–∑–¥–∞–ª–∏ —Å—á—ë—Ç. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã!\nüìÇ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: #{random.randint(1000,9999)}\nüì¨ –°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>ü•ù Qiwi</b>\n\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: <pre>{config.QIWI_NUMBER}</pre>\n‚úâÔ∏è –ö–æ–º–º–µ–Ω—Ç: <pre>{comment}</pre>\nüí∞ –ö –æ–ø–ª–∞—Ç–µ: <b>{config.access_cost}</b>\n<b>üïí –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç</b>",reply_markup=btn,parse_mode="HTML") 

async def create_link(comment):

	wait_minutes_pay = 15
	
	
	dtn = datetime.now() + timedelta(minutes=wait_minutes_pay)
	dtn = dtn.strftime("%Y-%m-%d %H%M")
	dtn = dtn.replace(" ", "T") # —Å–æ–∑–¥–∞–µ—Ç—Å—è –¥–∞—Ç–∞ –Ω–∞ 15 –º–∏–Ω—É—Ç –±–æ–ª—å—à–µ, —Ç–∏–ø–æ —Å–∫–æ–ª—å–∫–æ —Å—á–µ—Ç –±—É–¥–µ—Ç –¥–µ—Ä–∂–∞—Ç—å—Å—è, –º–∏–Ω—É—Ç—ã –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ
	link = f'https://oplata.qiwi.com/create?publicKey={config.p2p_qiwi_public_key}&comment={comment}&billId={comment}&customFields[themeCode]=YVAN-PPcftOY-G-&amount={config.access_cost}&lifetime={dtn}'
	check_link = requests.get(link)
	btn1 = InlineKeyboardButton(text="‚õì –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É",url=link)
	btn2 = InlineKeyboardButton(text=" üëå –Ø –æ–ø–ª–∞—Ç–∏–ª",callback_data=f"checks,{comment}")
	btn = InlineKeyboardMarkup().add(btn1,btn2)

	return btn
@dp.message_handler(text="üìé –ü–æ–º–æ—â—å")
async def helping(message: types.Message):
	user_status = await bot.get_chat_member(config.channel_id,message.from_user.id)
	if user_status.status == "member" or user_status.status == "administrator" or user_status.status == "creator":

		await message.answer(f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å/–ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞–ø–∏—à–∏—Ç–µ:\n\n{config.login}")
	else:
		await message.answer("‚úâÔ∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n–ü—É–±–ª–∏–∫—É–µ–º –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",reply_markup=menu.status_id_channel)
@dp.callback_query_handler(Text(startswith="checks"))
async def end(call: types.CallbackQuery):
	comment = call.data.split(",")[1]
	
	all_head = {"Authorization": f"Bearer {config.p2p_qiwi_secret_key}", "Accept": "application/json"}
	req = requests.get(f'https://api.qiwi.com/partner/bill/v1/bills/{comment}', headers=all_head).json()
		
	check = await check_status(req)
	if check:
		balances = req["amount"]["value"]

		await databases.replace(call.from_user.id)
		await bot.send_message(call.from_user.id,"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É!",reply_markup=menu.menu_vip)
		await bot.send_message(config.admin,f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª —Å—á–µ—Ç –Ω–∞ {balances}‚ÇΩ")
			
	else:
		await bot.send_message(call.from_user.id,"–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ!")
		
		
async def check_status(req):
	try:
		if req['status']['value'] == 'PAID':
			if round(config.access_cost) == round(float(req['amount']['value'])):
				return True
		else:
			return False
	except:
		return False

@dp.message_handler(content_types=["text"])
async def alll(message: types.Message):
 user_status = await bot.get_chat_member(config.channel_id,message.from_user.id)
 if user_status.status == "member" or user_status.status == "administrator" or user_status.status == "creator":
  await message.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
 else:
  await message.answer("‚úâÔ∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n–ü—É–±–ª–∏–∫—É–µ–º –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",reply_markup=menu.status_id_channel)

executor.start_polling(dp,skip_updates=True)